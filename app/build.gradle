apply plugin: 'com.android.application'

android {
    compileSdkVersion 21
    buildToolsVersion '24.0.0'

    defaultConfig {
        applicationId "phoenix.delta"
        minSdkVersion 21
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        main {
            jniLibs.srcDir new File(projectDir, 'libs')
        }
    }
}

configurations { natives }

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'org.apache.commons:commons-lang3:3.4'
    compile 'commons-io:commons-io:2.5'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.microsoft.graph:msgraph-sdk-android:1.2.+'
    compile 'com.microsoft.graph:msa-auth-for-android-adapter:0.9.+'
    compile 'com.badlogicgames.gdx:gdx:1.4.1'
    compile 'com.badlogicgames.gdx:gdx-backend-android:1.4.1'
    natives "com.badlogicgames.gdx:gdx-platform:1.4.1:natives-armeabi"
    natives "com.badlogicgames.gdx:gdx-platform:1.4.1:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:1.4.1:natives-x86"
}

task copyAndroidNatives() {
    file("libs/armeabi/").mkdirs();
    file("libs/armeabi-v7a/").mkdirs();
    file("libs/x86/").mkdirs();

    configurations.natives.files.each { jar ->
        def outputDir = null
        if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
        if (jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
        if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
        if (outputDir != null) {
            copy {
                from zipTree(jar)
                into outputDir
                include "*.so"
            }
        }
    }
}
